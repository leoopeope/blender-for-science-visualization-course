/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    clientId: null
};
class ImgurPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.cmAndHandlersMap = new Map;
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    onunload() {
        this.restoreOriginalHandlers();
    }
    restoreOriginalHandlers() {
        this.cmAndHandlersMap.forEach((originalHandlers, cm) => {
            cm._handlers.drop[0] = originalHandlers.drop;
            cm._handlers.paste[0] = originalHandlers.paste;
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new ImgurSettingTab(this.app, this));
            this.setupImgurHandlers();
        });
    }
    setupImgurHandlers() {
        this.registerCodeMirror((cm) => {
            let originalHandlers = this.backupOriginalHandlers(cm);
            cm._handlers.drop[0] = (_, e) => {
                if (!this.settings.clientId) {
                    console.warn("Please either set imgur client id or disable the plugin");
                    return originalHandlers.drop(_, e);
                }
                if (e.dataTransfer.types.length !== 1 || e.dataTransfer.types[0] !== "Files") {
                    return originalHandlers.drop(_, e);
                }
                let files = e.dataTransfer.files;
                for (let i = 0; i < files.length; i++) {
                    if (!files[i].type.startsWith("image")) {
                        // using original handlers if at least one of drag-and drop files is not an image
                        // It is not possible to call DragEvent.dataTransfer#clearData(images) here
                        // to split images and non-images processing
                        return originalHandlers.drop(_, e);
                    }
                }
                let images = e.dataTransfer.files;
                for (let i = 0; i < images.length; i++) {
                    this.uploadFileAndEmbedImgurImage(images[i]).catch(console.error);
                }
            };
            cm._handlers.paste[0] = (_, e) => {
                if (!this.settings.clientId) {
                    console.warn("Please either set imgur client id or disable the plugin");
                    return originalHandlers.paste(_, e);
                }
                let files = e.clipboardData.files;
                if (files.length === 0 || !files[0].type.startsWith("image")) {
                    return originalHandlers.paste(_, e);
                }
                for (let i = 0; i < files.length; i++) {
                    this.uploadFileAndEmbedImgurImage(files[i]).catch(console.error);
                }
            };
        });
    }
    backupOriginalHandlers(cm) {
        if (!this.cmAndHandlersMap.has(cm)) {
            let originalDropHandler = cm._handlers.drop[0];
            let originalPasteHandler = cm._handlers.paste[0];
            this.cmAndHandlersMap.set(cm, { drop: originalDropHandler, paste: originalPasteHandler });
        }
        return this.cmAndHandlersMap.get(cm);
    }
    uploadFileAndEmbedImgurImage(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let pasteId = (Math.random() + 1).toString(36).substr(2, 5);
            this.insertTemporaryText(pasteId);
            try {
                let resp = yield this.uploadFile(file);
                if (!resp.ok) {
                    let err = { response: resp, body: yield resp.text() };
                    this.handleFailedUpload(pasteId, err);
                    return;
                }
                let json = yield resp.json();
                this.embedMarkDownImage(pasteId, json);
            }
            catch (e) {
                this.handleFailedUpload(pasteId, e);
            }
        });
    }
    insertTemporaryText(pasteId) {
        let progressText = ImgurPlugin.progressTextFor(pasteId);
        this.getEditor().replaceSelection(progressText + "\n");
    }
    static progressTextFor(id) {
        return `![Uploading file...${id}]()`;
    }
    uploadFile(file) {
        const data = new FormData();
        data.append('image', file);
        return fetch('https://api.imgur.com/3/image.json', {
            method: 'POST',
            headers: new Headers({ 'Authorization': 'Client-ID ' + this.settings.clientId }),
            body: data
        });
    }
    embedMarkDownImage(pasteId, jsonResponse) {
        let imageUrl = jsonResponse.data.link;
        let progressText = ImgurPlugin.progressTextFor(pasteId);
        let markDownImage = `![](${imageUrl})`;
        ImgurPlugin.replaceFirstOccurrence(this.getEditor(), progressText, markDownImage);
    }
    ;
    handleFailedUpload(pasteId, reason) {
        console.error("Failed imgur request: ", reason);
        let progressText = ImgurPlugin.progressTextFor(pasteId);
        ImgurPlugin.replaceFirstOccurrence(this.getEditor(), progressText, "⚠️Imgur upload failed, check dev console");
    }
    ;
    static replaceFirstOccurrence(editor, target, replacement) {
        let lines = editor.getValue().split('\n');
        for (let i = 0; i < lines.length; i++) {
            let ch = lines[i].indexOf(target);
            if (ch != -1) {
                let from = { line: i, ch: ch };
                let to = { line: i, ch: ch + target.length };
                editor.replaceRange(replacement, from, to);
                break;
            }
        }
    }
    getEditor() {
        let view = this.app.workspace.activeLeaf.view;
        return view.sourceMode.cmEditor;
    }
}
class ImgurSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'imgur.com plugin settings' });
        new obsidian.Setting(containerEl)
            .setName('Client ID')
            .setDesc(this.clientIdSettingDescription())
            .addText(text => text.setPlaceholder('Enter your client_id')
            .setValue(this.plugin.settings.clientId)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.clientId = value;
            yield this.plugin.saveSettings();
        })));
    }
    clientIdSettingDescription() {
        const registerClientUrl = "https://api.imgur.com/oauth2/addclient";
        let fragment = document.createDocumentFragment();
        let a = document.createElement('a');
        a.textContent = registerClientUrl;
        a.setAttribute("href", registerClientUrl);
        fragment.append("Obtained from ");
        fragment.append(a);
        return fragment;
    }
}

module.exports = ImgurPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
